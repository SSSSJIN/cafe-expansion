-- 1. 기존 테이블 DROP (의존성 역순으로 DROP)
-- COMMENTS 테이블이 BOOK/EPISODE 테이블을 참조할 가능성이 있으므로 가장 먼저 DROP
DROP TABLE COMMENTS CASCADE CONSTRAINTS;
-- BOARD 테이블은 독립적이거나, USERS를 참조할 수 있지만 순환 참조 가능성은 낮으므로 다음으로 DROP
DROP TABLE BOARD CASCADE CONSTRAINTS;
-- BOOK 테이블은 EPISODE 테이블이 참조할 수 있으므로 EPISODE 테이블보다 먼저 DROP하지 않음.
-- USERS 테이블은 다른 테이블에서 외래 키로 참조될 수 있으므로 가장 나중에 DROP (아래 DDL에 USERS 참조가 없음)
-- EPISODE 테이블이 BOOK을 참조하므로 EPISODE 먼저 DROP
DROP TABLE EPISODE CASCADE CONSTRAINTS;
DROP TABLE BOOK CASCADE CONSTRAINTS;
DROP TABLE USERS CASCADE CONSTRAINTS;


-- 2. USERS 테이블 생성
CREATE TABLE USERS (
  ID        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  USERNAME  VARCHAR2(50) UNIQUE NOT NULL,
  PASSWORD  VARCHAR2(100) NOT NULL,
  ROLE      VARCHAR2(20) DEFAULT 'ROLE_USER' NOT NULL
);

COMMENT ON COLUMN USERS.ID IS '사용자 고유 ID';
COMMENT ON COLUMN USERS.USERNAME IS '사용자 로그인 ID (카카오 연동 시 카카오 ID)';
COMMENT ON COLUMN USERS.PASSWORD IS '비밀번호';
COMMENT ON COLUMN USERS.ROLE IS '사용자 권한 (예: ROLE_USER, ROLE_ADMIN)';

-- 3. BOOK 테이블 생성
CREATE TABLE BOOK (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  TITLE       VARCHAR2(200) NOT NULL,
  AUTHOR      VARCHAR2(100) NOT NULL,
  GENRE       VARCHAR2(50), -- BookVO에 genre 필드가 있으므로 추가
  DESCRIPTION VARCHAR2(1000),
  IMAGE_URL   VARCHAR2(300), -- BookVO에 imageUrl이 있으므로 컬럼명 변경
  THUMBNAIL   VARCHAR2(300), -- BookVO에 thumbnail이 있으므로 추가
  REGDATE     TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON COLUMN BOOK.ID IS '책 고유 ID';
COMMENT ON COLUMN BOOK.TITLE IS '책 제목';
COMMENT ON COLUMN BOOK.AUTHOR IS '작가';
COMMENT ON COLUMN BOOK.GENRE IS '장르';
COMMENT ON COLUMN BOOK.DESCRIPTION IS '책 설명';
COMMENT ON COLUMN BOOK.IMAGE_URL IS '책 상세 페이지 이미지 URL';
COMMENT ON COLUMN BOOK.THUMBNAIL IS '책 썸네일 이미지 URL (홈, 랭킹 페이지용)';


-- 4. EPISODE 테이블 생성
CREATE TABLE EPISODE (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  BOOK_ID     NUMBER NOT NULL,
  TITLE       VARCHAR2(200) NOT NULL,
  EPISODE_NO  NUMBER NOT NULL,
  REG_DATE    TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT FK_EPISODE_BOOK FOREIGN KEY (BOOK_ID) REFERENCES BOOK(ID)
);

COMMENT ON COLUMN EPISODE.ID IS '에피소드 고유 ID';
COMMENT ON COLUMN EPISODE.BOOK_ID IS '관련 책 ID (FK)';
COMMENT ON COLUMN EPISODE.TITLE IS '에피소드 제목';
COMMENT ON COLUMN EPISODE.EPISODE_NO IS '에피소드 번호';
COMMENT ON COLUMN EPISODE.REG_DATE IS '등록일';


-- 5. BOARD 테이블 생성
CREATE TABLE BOARD (
  ID        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  TITLE     VARCHAR2(200) NOT NULL,
  CONTENT   CLOB NOT NULL,
  WRITER    VARCHAR2(50) NOT NULL,
  REGDATE   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  HOT_FLAG  NUMBER(1) DEFAULT 0 NOT NULL, -- 0: 일반, 1: 핫 게시글
  TOP_RANK  NUMBER(2)                     -- 랭킹 (예: 1-10위, NULL 가능)
);

COMMENT ON COLUMN BOARD.ID IS '게시글 고유 ID';
COMMENT ON COLUMN BOARD.TITLE IS '게시글 제목';
COMMENT ON COLUMN BOARD.CONTENT IS '게시글 내용';
COMMENT ON COLUMN BOARD.WRITER IS '작성자 (USER.USERNAME 참조, FK는 미설정)';
COMMENT ON COLUMN BOARD.REGDATE IS '작성일';
COMMENT ON COLUMN BOARD.HOT_FLAG IS '핫 게시글 여부 (0:N, 1:Y)';
COMMENT ON COLUMN BOARD.TOP_RANK IS '랭킹 순위';


-- 6. COMMENTS 테이블 생성
CREATE TABLE COMMENTS (
  ID         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  BOOK_ID    NUMBER, -- NULL 허용
  EPISODE_ID NUMBER, -- NULL 허용
  CONTENT    VARCHAR2(1000) NOT NULL,
  WRITER     VARCHAR2(50) NOT NULL,
  REG_DATE   TIMESTAMP DEFAULT SYSTIMESTAMP
   FOREIGN KEY (BOOK_ID) REFERENCES BOOK(ID) (필요 시 추가)
   FOREIGN KEY (EPISODE_ID) REFERENCES EPISODE(ID) (필요 시 추가)
);

COMMENT ON COLUMN COMMENTS.ID IS '댓글 고유 ID';
COMMENT ON COLUMN COMMENTS.BOOK_ID IS '관련 책 ID (FK)';
COMMENT ON COLUMN COMMENTS.EPISODE_ID IS '관련 에피소드 ID (FK)';
COMMENT ON COLUMN COMMENTS.CONTENT IS '댓글 내용';
COMMENT ON COLUMN COMMENTS.WRITER IS '작성자 (USER.USERNAME 참조, FK는 미설정)';
COMMENT ON COLUMN COMMENTS.REG_DATE IS '작성일';


-- 7. BOOK_LIKES 테이블 생성 (좋아요 기능 추가를 위한 테이블)
CREATE TABLE BOOK_LIKES (
  BOOK_ID     NUMBER NOT NULL,
  USER_ID     NUMBER NOT NULL,
  LIKED_DATE  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  PRIMARY KEY (BOOK_ID, USER_ID), -- 복합 기본 키
  CONSTRAINT FK_LIKES_BOOK FOREIGN KEY (BOOK_ID) REFERENCES BOOK(ID),
  CONSTRAINT FK_LIKES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

COMMENT ON COLUMN BOOK_LIKES.BOOK_ID IS '좋아요한 책 ID';
COMMENT ON COLUMN BOOK_LIKES.USER_ID IS '좋아요한 사용자 ID';
COMMENT ON COLUMN BOOK_LIKES.LIKED_DATE IS '좋아요 누른 날짜';


-- 8. RECENT_VIEWS 테이블 생성 (최근 본 목록 저장을 위한 테이블)
CREATE TABLE RECENT_VIEWS (
  USER_ID     NUMBER NOT NULL,
  BOOK_ID     NUMBER NOT NULL,
  VIEW_DATE   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  PRIMARY KEY (USER_ID, BOOK_ID), -- 복합 기본 키 (한 사용자가 한 책을 여러 번 봐도 최종 날짜만 업데이트)
  CONSTRAINT FK_RECENT_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_RECENT_BOOK FOREIGN KEY (BOOK_ID) REFERENCES BOOK(ID)
);

COMMENT ON COLUMN RECENT_VIEWS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN RECENT_VIEWS.BOOK_ID IS '최근 본 책 ID';
COMMENT ON COLUMN RECENT_VIEWS.VIEW_DATE IS '최근 조회 날짜';


-- 9. 샘플 데이터 삽입

-- USERS 샘플 데이터
INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('user1', 'pass1', 'ROLE_USER');
INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('admin', 'adminpass', 'ROLE_ADMIN');
INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('testuser', 'testpass', 'ROLE_USER');

-- BOOK 샘플 데이터
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('마법사의 서', '김작가', '판타지', '평범한 고등학생이 우연히 고대 마법서를 발견하면서 벌어지는 이야기', '/resources/image/book1_detail.jpg', '/resources/image/book1_thumb.jpg');
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('강철의 연금술사', '홍길동', '액션', '금지된 연금술로 인해 몸을 잃은 형제가 원래의 몸을 되찾기 위한 여정', '/resources/image/book2_detail.jpg', '/resources/image/book2_thumb.jpg');
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('로맨스 멜로디', '이작가', '로맨스', '음악을 사랑하는 두 남녀의 가슴 설레는 로맨스', '/resources/image/book3_detail.jpg', '/resources/image/book3_thumb.jpg');
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('SF 탐험대', '박작가', 'SF', '미지의 행성을 탐험하는 우주 탐험대의 모험', '/resources/image/book4_detail.jpg', '/resources/image/book4_thumb.jpg');
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('명탐정 K', '최작가', '추리', '천재 탐정 K가 미스터리한 사건들을 해결해 나가는 이야기', '/resources/image/book5_detail.jpg', '/resources/image/book5_thumb.jpg');
INSERT INTO BOOK (TITLE, AUTHOR, GENRE, DESCRIPTION, IMAGE_URL, THUMBNAIL) VALUES
('고양이의 비밀', '정작가', '동화', '말하는 고양이와 소녀의 우정 이야기', '/resources/image/book6_detail.jpg', '/resources/image/book6_thumb.jpg');


-- EPISODE 샘플 데이터 (BOOK 테이블의 ID 값을 확인 후 삽입)
-- '마법사의 서' (ID: 1이라고 가정)
INSERT INTO EPISODE (BOOK_ID, TITLE, EPISODE_NO) VALUES (1, '프롤로그: 마법서의 발견', 1);
INSERT INTO EPISODE (BOOK_ID, TITLE, EPISODE_NO) VALUES (1, '마법 연습: 첫 번째 마법', 2);
INSERT INTO EPISODE (BOOK_ID, TITLE, EPISODE_NO) VALUES (1, '위험한 초대: 어둠의 마법사', 3);
-- '강철의 연금술사' (ID: 2라고 가정)
INSERT INTO EPISODE (BOOK_ID, TITLE, EPISODE_NO) VALUES (2, '오프닝: 금지된 연금술', 1);
INSERT INTO EPISODE (BOOK_ID, TITLE, EPISODE_NO) VALUES (2, '여행의 시작: 현자의 돌을 찾아서', 2);


-- BOARD 샘플 데이터
INSERT INTO BOARD (TITLE, CONTENT, WRITER, HOT_FLAG, TOP_RANK) VALUES
('새로운 판타지 작품 추천해주세요!', '최근 볼 만한 판타지 웹소설이나 웹툰 있을까요? 추천 부탁드립니다!', 'user1', 1, 1);
INSERT INTO BOARD (TITLE, CONTENT, WRITER, HOT_FLAG) VALUES
('지금 핫한 작품 강철의 연금술사 후기!', '정말 재미있게 보고 있습니다. 다음 화가 기대되네요.', 'testuser', 1);
INSERT INTO BOARD (TITLE, CONTENT, WRITER) VALUES
('웹툰 그리는 법 궁금합니다.', '웹툰 작가 지망생입니다. 어떻게 시작해야 할까요?', 'admin');
INSERT INTO BOARD (TITLE, CONTENT, WRITER, HOT_FLAG, TOP_RANK) VALUES
('이번 주 실시간 랭킹 분석', '마법사의 서가 1위네요. 역시 인기 많아요.', 'user1', 1, 2);

-- COMMENTS 샘플 데이터 (BOOK_ID 또는 EPISODE_ID를 확인 후 삽입)
-- BOOK ID 1 (마법사의 서)에 대한 댓글
INSERT INTO COMMENTS (BOOK_ID, CONTENT, WRITER) VALUES (1, '마법사의 서 정말 명작입니다!', 'user1');
INSERT INTO COMMENTS (BOOK_ID, CONTENT, WRITER) VALUES (1, '그림체도 너무 예뻐요.', 'testuser');
-- EPISODE ID 1 (마법사의 서 1화)에 대한 댓글 (에피소드 ID는 위에 삽입된 값 확인 필요)
-- (편의상 BOOK ID 1, EPISODE_NO 1인 에피소드의 ID를 1로 가정)
INSERT INTO COMMENTS (EPISODE_ID, CONTENT, WRITER) VALUES (1, '프롤로그부터 몰입감이 장난 아니네요!', 'user1');


-- BOOK_LIKES 샘플 데이터 (USER, BOOK ID 확인 후 삽입)
INSERT INTO BOOK_LIKES (BOOK_ID, USER_ID) VALUES (1, 1); -- user1이 '마법사의 서' 좋아요
INSERT INTO BOOK_LIKES (BOOK_ID, USER_ID) VALUES (2, 1); -- user1이 '강철의 연금술사' 좋아요
INSERT INTO BOOK_LIKES (BOOK_ID, USER_ID) VALUES (1, 3); -- testuser가 '마법사의 서' 좋아요

-- RECENT_VIEWS 샘플 데이터 (USER, BOOK ID 확인 후 삽입)
INSERT INTO RECENT_VIEWS (USER_ID, BOOK_ID, VIEW_DATE) VALUES (1, 1, SYSTIMESTAMP); -- user1이 '마법사의 서' 봄
INSERT INTO RECENT_VIEWS (USER_ID, BOOK_ID, VIEW_DATE) VALUES (1, 2, SYSTIMESTAMP - INTERVAL '1' DAY); -- user1이 '강철의 연금술사'를 어제 봄
INSERT INTO RECENT_VIEWS (USER_ID, BOOK_ID, VIEW_DATE) VALUES (3, 1, SYSTIMESTAMP); -- testuser가 '마법사의 서' 봄

COMMIT;

CREATE TABLE BOOK (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  TITLE       VARCHAR2(200) NOT NULL,
  AUTHOR      VARCHAR2(100) NOT NULL,
  GENRE       VARCHAR2(50), -- BookVO에 genre 필드가 있으므로 추가
  DESCRIPTION VARCHAR2(1000),
  IMAGE_URL   VARCHAR2(300), -- BookVO에 imageUrl이 있으므로 컬럼명 변경
  THUMBNAIL   VARCHAR2(300), -- BookVO에 thumbnail이 있으므로 추가
  REGDATE     TIMESTAMP DEFAULT SYSTIMESTAMP
);

DROP?TABLE?BOOK;
DROP?TABLE?COMMENTS;

DESC USERS;
ALTER TABLE USERS ADD KAKAO_ID VARCHAR2(50);
ALTER TABLE USERS ADD JOIN_DATE DATE;
ALTER TABLE USERS ADD PROFILE_IMAGE_URL VARCHAR2(200);
ALTER TABLE USERS ADD NICKNAME VARCHAR2(50);
ALTER TABLE USERS ADD EMAIL VARCHAR2(100);
DESC USERS;
